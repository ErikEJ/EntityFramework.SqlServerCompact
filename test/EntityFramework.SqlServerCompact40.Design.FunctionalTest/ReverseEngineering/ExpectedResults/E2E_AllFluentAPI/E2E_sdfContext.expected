using Microsoft.Data.Entity;
using Microsoft.Data.Entity.Metadata;

namespace E2ETest.Namespace
{
    public partial class E2E_sdfContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            options.UseSqlCe(@"{{connectionString}}");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AllDataTypes>(entity =>
            {
                entity.Property(e => e.binaryColumn)
                    .HasMaxLength(1)
                    .HasColumnType("binary");

                entity.Property(e => e.charColumn)
                    .HasMaxLength(1)
                    .HasColumnType("nchar");

                entity.Property(e => e.decimalColumn).HasColumnType("numeric");

                entity.Property(e => e.moneyColumn).HasColumnType("money");

                entity.Property(e => e.ncharColumn)
                    .HasMaxLength(1)
                    .HasColumnType("nchar");

                entity.Property(e => e.ntextColumn).HasColumnType("ntext");

                entity.Property(e => e.numericColumn).HasColumnType("numeric");

                entity.Property(e => e.nvarcharColumn).HasMaxLength(1);

                entity.Property(e => e.smallmoneyColumn).HasColumnType("money");

                entity.Property(e => e.textColumn).HasColumnType("ntext");

                entity.Property(e => e.time4Column).HasMaxLength(16);

                entity.Property(e => e.timeColumn).HasMaxLength(16);

                entity.Property(e => e.timestampColumn)
                    .HasColumnType("rowversion")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.varbinaryColumn)
                    .HasMaxLength(1)
                    .HasColumnType("varbinary");

                entity.Property(e => e.varcharColumn).HasMaxLength(1);

                entity.Property(e => e.xmlColumn).HasColumnType("ntext");
            });

            modelBuilder.Entity<OneToManyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyDependentID1, e.OneToManyDependentID2 });

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToManyDependentFK).WithMany(p => p.OneToManyDependent).HasForeignKey(d => new { d.OneToManyDependentFK1, d.OneToManyDependentFK2 });
            });

            modelBuilder.Entity<OneToManyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyPrincipalID1, e.OneToManyPrincipalID2 });

                entity.Property(e => e.Other)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOneDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneDependentID1, e.OneToOneDependentID2 });

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneDependentNavigation).WithOne(p => p.OneToOneDependent).HasForeignKey<OneToOneDependent>(d => new { d.OneToOneDependentID1, d.OneToOneDependentID2 }).OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyDependentID1, e.OneToOneFKToUniqueKeyDependentID2 });

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyDependentFK1, e.OneToOneFKToUniqueKeyDependentFK2 }).HasName("UK_OneToOneFKToUniqueKeyDependent").IsUnique();

                entity.Property(e => e.SomeColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneFKToUniqueKeyDependentFK).WithOne(p => p.OneToOneFKToUniqueKeyDependent).HasPrincipalKey<OneToOneFKToUniqueKeyPrincipal>(p => new { p.OneToOneFKToUniqueKeyPrincipalUniqueKey1, p.OneToOneFKToUniqueKeyPrincipalUniqueKey2 }).HasForeignKey<OneToOneFKToUniqueKeyDependent>(d => new { d.OneToOneFKToUniqueKeyDependentFK1, d.OneToOneFKToUniqueKeyDependentFK2 });
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyPrincipalID1, e.OneToOneFKToUniqueKeyPrincipalID2 });

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyPrincipalUniqueKey1, e.OneToOneFKToUniqueKeyPrincipalUniqueKey2 }).HasName("UK_OneToOneFKToUniqueKeyPrincipal").IsUnique();

                entity.Property(e => e.SomePrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOnePrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOnePrincipalID1, e.OneToOnePrincipalID2 });

                entity.Property(e => e.SomeOneToOnePrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<OneToOneSeparateFKDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKDependentID1, e.OneToOneSeparateFKDependentID2 });

                entity.HasIndex(e => new { e.OneToOneSeparateFKDependentFK1, e.OneToOneSeparateFKDependentFK2 }).HasName("UK_OneToOneSeparateFKDependent").IsUnique();

                entity.Property(e => e.SomeDependentEndColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.OneToOneSeparateFKDependentFK).WithOne(p => p.OneToOneSeparateFKDependent).HasForeignKey<OneToOneSeparateFKDependent>(d => new { d.OneToOneSeparateFKDependentFK1, d.OneToOneSeparateFKDependentFK2 });
            });

            modelBuilder.Entity<OneToOneSeparateFKPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKPrincipalID1, e.OneToOneSeparateFKPrincipalID2 });

                entity.Property(e => e.SomeOneToOneSeparateFKPrincipalColumn)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<PropertyConfiguration>(entity =>
            {
                entity.HasIndex(e => new { e.A, e.B }).HasName("Test_PropertyConfiguration_Index");

                entity.Property(e => e.RowversionColumn)
                    .IsRequired()
                    .HasColumnType("rowversion")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.WithDateDefaultExpression).HasDefaultValueSql("getdate()");

                entity.Property(e => e.WithDateFixedDefault).HasDefaultValueSql("'October 20, 2015 11am'");

                entity.Property(e => e.WithDefaultValue).HasDefaultValue(-1);

                entity.Property(e => e.WithGuidDefaultExpression).HasDefaultValueSql("NEWID()");

                entity.Property(e => e.WithMoneyDefaultValue)
                    .HasColumnType("money")
                    .HasDefaultValue(0.00m);

                entity.Property(e => e.WithVarcharNullDefaultValue).HasMaxLength(1);
            });

            modelBuilder.Entity<ReferredToByTableWithUnmappablePrimaryKeyColumn>(entity =>
            {
                entity.Property(e => e.ReferredToByTableWithUnmappablePrimaryKeyColumnID).ValueGeneratedNever();

                entity.Property(e => e.AColumn)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ValueGeneratedOnAddColumn).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SelfReferencing>(entity =>
            {
                entity.Property(e => e.SelfReferencingID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.SelfReferenceFKNavigation).WithMany(p => p.InverseSelfReferenceFKNavigation).HasForeignKey(d => d.SelfReferenceFK);
            });

            modelBuilder.Entity<Test_Spaces_Keywords_Table>(entity =>
            {
                entity.ToTable("Test Spaces Keywords Table");

                entity.Property(e => e.Test_Spaces_Keywords_TableID)
                    .HasColumnName("Test Spaces Keywords TableID")
                    .ValueGeneratedNever();

                entity.Property(e => e.@Multiple_At_Symbols_In_Column).HasColumnName("@Multiple@At@Symbols@In@Column");

                entity.Property(e => e._abstract).HasColumnName("abstract");

                entity.Property(e => e._Backslashes_In_Column).HasColumnName("\\Backslashes\\In\\Column");

                entity.Property(e => e._class).HasColumnName("class");

                entity.Property(e => e._Dollar_Sign_Column).HasColumnName("$Dollar$Sign$Column");

                entity.Property(e => e._Double_Quotes_Column).HasColumnName("\"Double\"Quotes\"Column");

                entity.Property(e => e._Exclamation_Mark_Column).HasColumnName("!Exclamation!Mark!Column");

                entity.Property(e => e._volatile).HasColumnName("volatile");

                entity.Property(e => e.Commas_In_Column).HasColumnName("Commas,In,Column");

                entity.Property(e => e.Spaces_In_Column).HasColumnName("Spaces In Column");

                entity.Property(e => e.Tabs_In_Column).HasColumnName("Tabs\tIn\tColumn");
            });
        }

        public virtual DbSet<AllDataTypes> AllDataTypes { get; set; }
        public virtual DbSet<OneToManyDependent> OneToManyDependent { get; set; }
        public virtual DbSet<OneToManyPrincipal> OneToManyPrincipal { get; set; }
        public virtual DbSet<OneToOneDependent> OneToOneDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyDependent> OneToOneFKToUniqueKeyDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyPrincipal> OneToOneFKToUniqueKeyPrincipal { get; set; }
        public virtual DbSet<OneToOnePrincipal> OneToOnePrincipal { get; set; }
        public virtual DbSet<OneToOneSeparateFKDependent> OneToOneSeparateFKDependent { get; set; }
        public virtual DbSet<OneToOneSeparateFKPrincipal> OneToOneSeparateFKPrincipal { get; set; }
        public virtual DbSet<PropertyConfiguration> PropertyConfiguration { get; set; }
        public virtual DbSet<ReferredToByTableWithUnmappablePrimaryKeyColumn> ReferredToByTableWithUnmappablePrimaryKeyColumn { get; set; }
        public virtual DbSet<SelfReferencing> SelfReferencing { get; set; }
        public virtual DbSet<Test_Spaces_Keywords_Table> Test_Spaces_Keywords_Table { get; set; }
    }
}