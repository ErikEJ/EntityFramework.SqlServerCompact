@inherits Microsoft.Data.Entity.Relational.Design.Templating.RazorReverseEngineeringBase
@using System.Linq
@using Microsoft.Data.Entity.Relational.Design.ReverseEngineering.Configuration
@functions
{
    List<string> LayoutPropertyConfigurationLines(PropertyConfiguration pc, string propertyLambdaIdentifier, string indent)
    {
        var lines = new List<string>();
        var facetCount = pc.FacetConfigurations.Values.SelectMany(list => list).Count();
        foreach (var keyValuePair in pc.FacetConfigurations)
        {
            var forMethod = keyValuePair.Key;
            var methodBodyList = keyValuePair.Value;
            if (string.IsNullOrEmpty(forMethod))
            {
                foreach (var methodBody in methodBodyList)
                {
                    lines.Add("." + methodBody);
                }
            }
            else
            {
                if (methodBodyList.Count() == 1)
                {
                    lines.Add("." + forMethod + "()." + methodBodyList.First());
                }
                else
                {
                    lines.Add("." + forMethod + "(" + propertyLambdaIdentifier + " =>");
                    lines.Add("{");
                    foreach (var methodBody in methodBodyList)
                    {
                        lines.Add(indent + propertyLambdaIdentifier + "." + methodBody + ";");
                    }
                    lines.Add("})");
                }
            }
        }

        return lines;
    }
}
using Microsoft.Data.Entity;
using Microsoft.Data.Entity.Metadata;

namespace @Model.Namespace
{
@{
var className = Model.ClassName ?? Model.Helper.ClassName(Model.ConnectionString);
}    public partial class @className : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            options.UseSqlServer(@Model.Helper.VerbatimStringLiteral(Model.ConnectionString));
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
@{
var firstEntity = true;
}@foreach (var entityConfig in Model.Helper.EntityConfigurations)
{
    @if (!firstEntity)
    {
@:
    }
    firstEntity = false;
@:            modelBuilder.Entity<@entityConfig.EntityType.DisplayName()>(entity =>
@:            {
    var firstEntityFacet = true;
    @foreach (var entityFacet in entityConfig.FacetConfigurations)
    {
        @if (!firstEntityFacet)
        {
@:
        }
        firstEntityFacet = false;
@:                entity.@(entityFacet.ToString());
    }                        
    var firstProperty = true;
    @foreach (var propertyConfig in entityConfig.PropertyConfigurations)
    {
        @if (!firstEntityFacet || !firstProperty)
        {
@:
        }
        firstProperty = false;
        var propertyConfigurationLines = LayoutPropertyConfigurationLines(propertyConfig, "property", "    ");
        @* dnxcore50 requires line below be cast to explicit data type, not var. Similarly
           for other explicit casts farther down this template. *@
        int propertyConfigurationLineCount = propertyConfigurationLines.Count;
        @if (propertyConfigurationLineCount == 1)
        {
            @foreach (var line in propertyConfigurationLines)
            {
@:                entity.Property(e => e.@(propertyConfig.Property.Name))@(line);
            }
        }
        else
        {
@:                entity.Property(e => e.@(propertyConfig.Property.Name))
            var lineCount = 0;
            @foreach (string line in propertyConfigurationLines)
            {
                var outputLine = line;
                if (++lineCount == propertyConfigurationLineCount)
                {
                    outputLine = line + ";";
                }
@:                    @(outputLine)
            }
        }
    }
    var firstNavigation = true;
    @foreach (var relationshipConfig in entityConfig.RelationshipConfigurations)
    {
        @if (!firstEntityFacet || !firstProperty || !firstNavigation)
        {
@:
        }
        firstNavigation = false;
@:                entity.@Model.Generator.ModelUtilities.ConstructRelationshipConfiguration(relationshipConfig);
    }
@:            });
}
        }@* End of OnModelCreating() *@

@foreach (var et in Model.Helper.OrderedEntityTypes())
{
@:        public virtual DbSet<@et.Name> @et.Name { get; set; }
}
    }
}